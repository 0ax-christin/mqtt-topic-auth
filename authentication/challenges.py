"""Generate and verify challenges using HMAC

A simple module with functions that will be used for generation of challenges responses in the protocol
and also for the verification of valid responses to challenges.
The challenge response is typically generated by the client, the response is typically verified by the server
"""

from cryptography.exceptions import InvalidSignature
from cryptography.hazmat.primitives import hashes, hmac


# Given a challenge of bytes
# and a HMAC key, generate an HMAC(key, challenge) and return
def generate_challenge_response(
    nonce_challenge: bytes, hmac_key: bytes, rand_bytes: bytes
) -> bytes:
    """Generates a set of bytes that is the response of the client to a challenge from the server

    Parameters
    ----------
    nonce_challenge: bytes
       A set of random 64 bytes which is generated by the server and sent to client, which the client must generate a response for
       to authenticate itself
    hmac_key: bytes
       128 bytes generated using the secrets module which is used as part of the final key of the HMAC to generate the response
       It is sent to the client during registration inside a signed token message.
    rand_bytes: bytes
       48 random bytes generated using a seed that is part of the final key of the HMAC to generate the response. It requires
       the client to know the seed value along with which authentication it is to generate the correct set of bytes expected.
       This is what allows each nonce challenge to have a unique solution
    Returns
    --------
    response
       A set of bytes made as the output of the HMAC function whose Hashing algorithm was BLAKE2s, whose key was
       a concatenation of hmac_key and rand_bytes, and whose input was the servers challenge
    """
    h = hmac.HMAC(hmac_key + rand_bytes, hashes.BLAKE2s(32))
    h.update(nonce_challenge)
    response = h.finalize()
    return response


# Given the original nonce challenge and hmac key, verify that the supplied nonce solution is valid
# If so, return true, else false
def verify_challenge_response(
    nonce_challenge: bytes, nonce_solution: bytes, hmac_key: bytes, rand_bytes: bytes
) -> bool:
    """Verify the response generated by the client and return whether it is valid

    Parameters
    ----------
    nonce_challenge: bytes
      The original challenge sent by the server. The server will use the shared secret seed and hmac key to generate the HMAC
      response independently to verify whether it is the valid response.
    nonce_solution: bytes
      The solution generated by the client and sent as a response to a reauthentication request which must be verified. It is
      verified using the secret seed and hmac key shared between client and server
    hmac_key: bytes
      128 bytes sent to the client by the server in a signed token during registration which is part of the final key required
      to generate a valid response. It is shared between server and client only.
    rand_bytes: bytes
      48 bytes generated by the random module for the nth reauthentication with a given secret seed. It is part of the final key
      that is required to generate the valid response
    Returns
    -------
    True|False
      Indicates whether the generated response is valid, given the original nonce challenge and the key for that challenge round
    """
    h = hmac.HMAC(hmac_key + rand_bytes, hashes.BLAKE2s(32))
    h.update(nonce_challenge)
    try:
        h.verify(nonce_solution)
        print("Verified!!!!")
        return True
    except InvalidSignature:
        return False
